[{"path":"https://docs.ropensci.org/emld/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http://contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/emld/CONTRIBUTING.html","id":"repository-structure","dir":"","previous_headings":"","what":"Repository structure","title":"Contributing Guidelines","text":"repository structured standard R package following conventions outlined Writing R extensions manual. additional files provided part built R package listed .Rbuildignore, .travis.yml, used continuous testing integration.","code":""},{"path":"https://docs.ropensci.org/emld/CONTRIBUTING.html","id":"code","dir":"","previous_headings":"","what":"Code","title":"Contributing Guidelines","text":"code package found R/, (except compiled source code, used, /src). functions thoroughly documented roxygen2 notation; see Documentation. Code conform Style guide","code":""},{"path":"https://docs.ropensci.org/emld/CONTRIBUTING.html","id":"testing","dir":"","previous_headings":"","what":"Testing","title":"Contributing Guidelines","text":"new feature bug-fix include unit-test demonstrating change. Unit tests follow testthat framework files tests/testthat. Please make sure testing suite passes issuing pull request. can done running check() devtools package, also check consistent documentation, etc. package uses travis continuous testing mechanism R ensure test suite run push Github. icon top README.md indicates whether tests currently passing. package also uses codecov.io measure test coverage. code can covered automated tests (particular, functions involving user prompts), try avoid decreasing coverage writing unit tests contributed code. Codecov.io flag PRs decrease coverage.","code":""},{"path":"https://docs.ropensci.org/emld/CONTRIBUTING.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Contributing Guidelines","text":"function documentation generated automatically. Please edit documentation files man/ NAMESPACE. Instead, construct appropriate roxygen2 documentation function files R/ . documentation generated running document() function devtools package. Please consult Advanced R programming guide workflow unfamiliar . Note functions include examples documentation. Please use \\dontrun examples take seconds execute require internet connection. Likewise, README.md file base directory edited directly. file created automatically code runs examples shown, helping ensure functioning advertised consistent package README vignette. Instead, edit README.Rmd source file manuscripts run make build README.","code":""},{"path":"https://docs.ropensci.org/emld/CONTRIBUTING.html","id":"general-development-goals--guidelines","dir":"","previous_headings":"","what":"General Development Goals & Guidelines","title":"Contributing Guidelines","text":"many high-level functions, Using sensible defaults, (driven use cases). Docs point advanced users lower-level API need special cases. Maintain consistent user-facing API.","code":""},{"path":"https://docs.ropensci.org/emld/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2018 Carl Boettiger Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/emld/articles/tutorial.html","id":"emld","dir":"Articles","previous_headings":"","what":"emld","title":"emld Tutorial","text":"goal emld provide way work EML metadata JSON-LD format. ’s heart, package simply way translate EML XML document JSON-LD able reverse semantically equivalent JSON-LD file can serialized EML-schema valid XML. package three core functions: as_emld() Convert EML’s xml files (json version created package) native R object (S3 class called emld, essentially just list). as_xml() Convert native R format, emld, back XML-schema valid EML. as_json() Convert native R format, emld, json(LD).","code":""},{"path":"https://docs.ropensci.org/emld/articles/tutorial.html","id":"installation","dir":"Articles","previous_headings":"emld","what":"Installation","title":"emld Tutorial","text":"can install emld github :","code":"# install.packages(\"devtools\") devtools::install_github(\"ropensci/emld\")"},{"path":"https://docs.ropensci.org/emld/articles/tutorial.html","id":"motivation","dir":"Articles","previous_headings":"emld","what":"Motivation","title":"emld Tutorial","text":"contrast existing EML package, package aims light-weight implementation seeks provide intuitive data format make maximum use existing technology work format. particular, package emphasizes tools working linked data JSON-LD format. package meant replace EML, support complex operations found package. Rather, provides minimalist powerful way working EML documents can used backend complex operations. next release EML R package use emld hood. Note JSON-LD format considerably less rigid EML schema. means many valid, semantically equivalent representations JSON-LD side must map nearly XML format. extreme end, JSON-LD format can serialized RDF, everything flat set triples (e.g. essentially tabular representation), can query directly semantic tools like SPARQL, also automatically coerce back rigid nesting ordering structure required EML. ability “flatten” EML files can particularly convenient applications consuming parsing large numbers EML files. package may also make easier developers build EML, since S3/list JSON formats used proven appealing many R developers S4 XML serializations. JSON-LD also makes easier extend EML existing semantic vocabularies. standard JSON-LD operations (e.g. framing, compaction) make easy developers specify desired data structures, filter unnecessary terms provide defaults needed ones, even define custom property names, rather working often cumbersome prefixes URIs linked data.","code":"library(emld) library(jsonlite) library(magrittr)"},{"path":"https://docs.ropensci.org/emld/articles/tutorial.html","id":"reading-eml","dir":"Articles","previous_headings":"emld","what":"Reading EML","title":"emld Tutorial","text":"EML package can get particularly cumbersome comes extracting manipulating existing metadata highly nested EML files. emld approach can leverage rich array tools reading, extracting, manipulating existing EML files. can parse simple example manipulate familiar list object (S3 object):","code":"f <- system.file(\"extdata/example.xml\", package=\"emld\") eml <- as_emld(f) eml$dataset$title #> [1] \"Data from Cedar Creek LTER on productivity and species richness\\n  for use in a workshop titled \\\"An Analysis of the Relationship between\\n  Productivity and Diversity using Experimental Results from the Long-Term\\n  Ecological Research Network\\\" held at NCEAS in September 1996.\""},{"path":"https://docs.ropensci.org/emld/articles/tutorial.html","id":"writing-eml","dir":"Articles","previous_headings":"emld","what":"Writing EML","title":"emld Tutorial","text":"emld objects just nested lists, can create EML just writing lists: Note don’t worry order elements , as_xml re-order necessary validate. (instance, valid EML creator becomes listed contact.) course low-level interface help user know EML looks like. Creating EML scratch without knowledge schema job EML package beyond scope lightweight emld.","code":"me <- list(individualName = list(givenName = \"Carl\", surName = \"Boettiger\"))  eml <- list(dataset = list(               title = \"dataset title\",               contact = me,               creator = me),               system = \"doi\",               packageId = \"10.xxx\")  ex.xml <- tempfile(\"ex\", fileext = \".xml\") # use your preferred file path  as_xml(eml, ex.xml) testthat::expect_true(eml_validate(ex.xml) )"},{"path":"https://docs.ropensci.org/emld/articles/tutorial.html","id":"working-with-eml-as-json-ld","dir":"Articles","previous_headings":"","what":"Working with EML as JSON-LD","title":"emld Tutorial","text":"many applications, useful merely treat EML list object, seen , allowing R user leverage standard tools intuition working files. However, emld also opens door new possible directions thinking EML data terms JSON-LD serialization rather XML serialization. First, owing ’s comparative simplicity native data typing (e.g. Boolean/string/numeric data), JSON often easier many developers work EML’s native XML format.","code":""},{"path":"https://docs.ropensci.org/emld/articles/tutorial.html","id":"as-json-query-with-jq","dir":"Articles","previous_headings":"Working with EML as JSON-LD","what":"As JSON: Query with JQ","title":"emld Tutorial","text":"example, JSON can queried JQ, simple powerful query language also gives us lot flexibility return structure results. JQ syntax intuitive well documented, often easier typical munging JSON/list data using purrr. ’s example query turns EML JSON extracts north south bounding coordinates: Nice features JQ include ability recursive descent (common XPATH possible purrr) specify shape return object. prototype examples can use translate EML https://schema.org/Dataset representations metadata can found https://github.com/ropensci/emld/blob/master/notebook/jq_maps.md","code":"if(require(jqr) && require(magrittr)){    hf205 <- system.file(\"extdata/hf205.xml\", package=\"emld\")  as_emld(hf205) %>%    as_json() %>%    jq('.dataset.coverage.geographicCoverage.boundingCoordinates |         { northLat: .northBoundingCoordinate,           southLat: .southBoundingCoordinate }') %>%   fromJSON()  } #> $northLat #> [1] \"+42.55\" #>  #> $southLat #> [1] \"+42.42\""},{"path":"https://docs.ropensci.org/emld/articles/tutorial.html","id":"as-semantic-data-sparql-queries","dir":"Articles","previous_headings":"Working with EML as JSON-LD","what":"As semantic data: SPARQL queries","title":"emld Tutorial","text":"Another side-effect JSON-LD representation can treat EML “semantic” data. can provide way integrate EML records data sources, means can query EML using semantic SPARQL queries. One nice thing SPARQL queries , contrast XPATH, JQ, graph queries, SPARQL always returns data.frame particularly convenient format. SPARQL queries look like SQL queries name columns want SELECT command. Unlike SQL, names act variables. use block define variables relate .","code":"if(require(rdflib) && require(magrittr)){    f <- system.file(\"extdata/hf205.xml\", package=\"emld\") hf205.json <- tempfile(\"hf205\", fileext = \".json\") # Use your preferred filepath  as_emld(f) %>% as_json(hf205.json)  prefix <- paste0(\"PREFIX eml: <eml://ecoinformatics.org/\", eml_version(), \"/>\\n\") sparql <- paste0(prefix, '    SELECT ?genus ?species ?northLat ?southLat ?eastLong ?westLong     WHERE {      ?y eml:taxonRankName \"genus\" .     ?y eml:taxonRankValue ?genus .     ?y eml:taxonomicClassification ?s .     ?s eml:taxonRankName \"species\" .     ?s eml:taxonRankValue ?species .     ?x eml:northBoundingCoordinate ?northLat .     ?x eml:southBoundingCoordinate ?southLat .     ?x eml:eastBoundingCoordinate ?eastLong .     ?x eml:westBoundingCoordinate ?westLong .   } ')     rdf <- rdf_parse(hf205.json, \"jsonld\") df <- rdf_query(rdf, sparql) df  } #> # A tibble: 0 × 0"},{"path":"https://docs.ropensci.org/emld/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Carl Boettiger. Author, maintainer, copyright holder. Matthew B. Jones. Author, copyright holder. Bryce Mecum. Author, copyright holder.","code":""},{"path":"https://docs.ropensci.org/emld/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Boettiger, (2019). Ecological Metadata Linked Data. Journal Open Source Software, 4(34), 1276, https://doi.org/10.21105/joss.01276","code":"@Article{,   title = {Ecological Metadata as Linked Data. Journal of Open Source Software},   author = {Carl Boettiger},   month = {feb},   year = {2019},   publisher = {The Open Journals},   journal = {The Journal of Open Source Software},   number = {34},   volume = {4},   pages = {1276},   doi = {10.21105/joss.01276},   url = {https://doi.org/10.21105/joss.01276}, }"},{"path":"https://docs.ropensci.org/emld/index.html","id":"emld","dir":"","previous_headings":"","what":"Ecological Metadata as Linked Data","title":"Ecological Metadata as Linked Data","text":"goal emld provide way work EML metadata JSON-LD format. ’s heart, package simply way translate EML XML document JSON-LD able reverse semantically equivalent JSON-LD file can serialized EML-schema valid XML. package three core functions: as_emld() Convert EML’s xml files (json version created package) native R object (S3 class called emld, essentially just list). as_xml() Convert native R format, emld, back XML-schema valid EML. as_json() Convert native R format, emld, json(LD).","code":""},{"path":"https://docs.ropensci.org/emld/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Ecological Metadata as Linked Data","text":"can install emld github :","code":"# install.packages(\"devtools\") devtools::install_github(\"ropensci/emld\")"},{"path":"https://docs.ropensci.org/emld/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Ecological Metadata as Linked Data","text":"contrast existing EML package, package aims light-weight implementation seeks provide intuitive data format make maximum use existing technology work format. particular, package emphasizes tools working linked data JSON-LD format. package meant replace EML, support complex operations found package. Rather, provides minimalist powerful way working EML documents can used backend complex operations. Version 2.0 EML R package uses emld hood. Note JSON-LD format considerably less rigid EML schema. means many valid, semantically equivalent representations JSON-LD side must map nearly XML format. extreme end, JSON-LD format can serialized RDF, everything flat set triples (e.g. essentially tabular representation), can query directly semantic tools like SPARQL, also automatically coerce back rigid nesting ordering structure required EML. ability “flatten” EML files can particularly convenient applications consuming parsing large numbers EML files. package may also make easier developers build EML, since S3/list JSON formats used proven appealing many R developers S4 XML serializations.","code":"library(emld) library(jsonlite) library(magrittr) # for pipes library(jqr)      # for JQ examples only library(rdflib)   # for RDf examples only"},{"path":"https://docs.ropensci.org/emld/index.html","id":"reading-eml","dir":"","previous_headings":"","what":"Reading EML","title":"Ecological Metadata as Linked Data","text":"EML package can get particularly cumbersome comes extracting manipulating existing metadata highly nested EML files. emld approach can leverage rich array tools reading, extracting, manipulating existing EML files. can parse simple example manipulate familiar list object (S3 object):","code":"f <- system.file(\"extdata/example.xml\", package=\"emld\") eml <- as_emld(f) eml$dataset$title #> [1] \"Data from Cedar Creek LTER on productivity and species richness\\n  for use in a workshop titled \\\"An Analysis of the Relationship between\\n  Productivity and Diversity using Experimental Results from the Long-Term\\n  Ecological Research Network\\\" held at NCEAS in September 1996.\""},{"path":"https://docs.ropensci.org/emld/index.html","id":"writing-eml","dir":"","previous_headings":"","what":"Writing EML","title":"Ecological Metadata as Linked Data","text":"emld objects just nested lists, can create EML just writing lists: Note don’t worry order elements , as_xml re-order necessary validate. (instance, valid EML creator becomes listed contact.) course low-level interface help user know EML looks like. Creating EML scratch without knowledge schema job EML package beyond scope lightweight emld.","code":"me <- list(individualName = list(givenName = \"Carl\", surName = \"Boettiger\"))  eml <- list(dataset = list(               title = \"dataset title\",               contact = me,               creator = me),               system = \"doi\",               packageId = \"10.xxx\")  ex.xml <- tempfile(\"ex\", fileext = \".xml\") # use your preferred file path  as_xml(eml, ex.xml) #> NULL eml_validate(ex.xml) #> [1] TRUE #> attr(,\"errors\") #> character(0)"},{"path":"https://docs.ropensci.org/emld/index.html","id":"working-with-eml-as-json-ld","dir":"","previous_headings":"","what":"Working with EML as JSON-LD","title":"Ecological Metadata as Linked Data","text":"many applications, useful merely treat EML list object, seen , allowing R user leverage standard tools intuition working files. However, emld also opens door new possible directions thinking EML data terms JSON-LD serialization rather XML serialization. First, owing ’s comparative simplicity native data typing (e.g. Boolean/string/numeric data), JSON often easier many developers work EML’s native XML format.","code":""},{"path":"https://docs.ropensci.org/emld/index.html","id":"as-json-query-with-jq","dir":"","previous_headings":"","what":"As JSON: Query with JQ","title":"Ecological Metadata as Linked Data","text":"example, JSON can queried JQ, simple powerful query language also gives us lot flexibility return structure results. JQ syntax intuitive well documented, often easier typical munging JSON/list data using purrr. ’s example query turns EML JSON extracts north south bounding coordinates: Nice features JQ include ability recursive descent (common XPATH possible purrr) specify shape return object. prototype examples can use translate EML https://schema.org/Dataset representations metadata can found https://github.com/ropensci/emld/blob/master/notebook/jq_maps.md","code":"hf205 <- system.file(\"extdata/hf205.xml\", package=\"emld\")  as_emld(hf205) %>%    as_json() %>%    jq('.dataset.coverage.geographicCoverage.boundingCoordinates |         { northLat: .northBoundingCoordinate,           southLat: .southBoundingCoordinate }') %>%   fromJSON() #> $northLat #> [1] \"+42.55\" #>  #> $southLat #> [1] \"+42.42\""},{"path":"https://docs.ropensci.org/emld/index.html","id":"as-semantic-data-sparql-queries","dir":"","previous_headings":"","what":"As semantic data: SPARQL queries","title":"Ecological Metadata as Linked Data","text":"Another side-effect JSON-LD representation can treat EML “semantic” data. can provide way integrate EML records data sources, means can query EML using semantic SPARQL queries. One nice thing SPARQL queries , contrast XPATH, JQ, graph queries, SPARQL always returns data.frame particularly convenient format. SPARQL queries look like SQL queries name columns want SELECT command. Unlike SQL, names act variables. use block define variables relate . Please note emld project released Contributor Code Conduct. contributing project, agree abide terms.","code":"f <- system.file(\"extdata/hf205.xml\", package=\"emld\") hf205.json <- tempfile(\"hf205\", fileext = \".json\") # Use your preferred filepath  as_emld(f) %>%   as_json(hf205.json)  prefix <- paste0(\"PREFIX eml: <eml://ecoinformatics.org/\", eml_version(), \"/>\\n\") sparql <- paste0(prefix, '    SELECT ?genus ?species ?northLat ?southLat ?eastLong ?westLong     WHERE {      ?y eml:taxonRankName \"genus\" .     ?y eml:taxonRankValue ?genus .     ?y eml:taxonomicClassification ?s .     ?s eml:taxonRankName \"species\" .     ?s eml:taxonRankValue ?species .     ?x eml:northBoundingCoordinate ?northLat .     ?x eml:southBoundingCoordinate ?southLat .     ?x eml:eastBoundingCoordinate ?eastLong .     ?x eml:westBoundingCoordinate ?westLong .   } ')    rdf <- rdf_parse(hf205.json, \"jsonld\") df <- rdf_query(rdf, sparql) df #> # A tibble: 0 x 0"},{"path":"https://docs.ropensci.org/emld/paper.html","id":"reading-eml","dir":"","previous_headings":"","what":"Reading EML","title":"Working with EML as JSON-LD","text":"EML package can get particularly cumbersome comes extracting manipulating existing metadata highly nested EML files. emld approach can leverage rich array tools reading, extracting, manipulating existing EML files. can parse simple example manipulate familiar list object (S3 object):","code":"f <- system.file(\"extdata/example.xml\", package=\"emld\") eml <- as_emld(f)  cat(eml$dataset$title) ## Data from Cedar Creek LTER on productivity and species richness ##   for use in a workshop titled \"An Analysis of the Relationship between ##   Productivity and Diversity using Experimental Results from the Long-Term ##   Ecological Research Network\" held at NCEAS in September 1996."},{"path":"https://docs.ropensci.org/emld/paper.html","id":"writing-eml","dir":"","previous_headings":"","what":"Writing EML","title":"Working with EML as JSON-LD","text":"emld objects just nested lists, can create EML just writing lists: Note don’t worry order elements , as_xml re-order necessary validate. (instance, valid EML creator becomes listed contact. course low-level interface help user know EML looks like. Creating EML scratch without knowledge schema job EML package beyond scope lightweight emld.","code":"me <- list(individualName = list(givenName = \"Carl\", surName = \"Boettiger\"))  eml <- list(dataset = list(               title = \"dataset title\",               contact = me,               creator = me),               system = \"doi\",               packageId = \"10.xxx\")  as_xml(eml, \"ex.xml\") testthat::expect_true(eml_validate(\"ex.xml\") )"},{"path":"https://docs.ropensci.org/emld/paper.html","id":null,"dir":"","previous_headings":"","what":"Working with EML as JSON-LD","title":"Working with EML as JSON-LD","text":"many applications, useful merely treat EML list object, seen , allowing R user leverage standard tools intuition working files. However, emld also opens door new possible directions thinking EML data terms JSON-LD serialization rather XML serialization. First, owing ’s comparative simplicity native data typing (e.g. Boolean/string/numeric data), JSON often easier many developers work EML’s native XML format.","code":""},{"path":"https://docs.ropensci.org/emld/paper.html","id":"as-json-query-with-jq","dir":"","previous_headings":"","what":"As JSON: Query with JQ","title":"Working with EML as JSON-LD","text":"example, JSON can queried JQ, simple powerful query language also gives us lot flexibility return structure results. JQ syntax intuitive well documented, often easier typical munging JSON/list data using purrr. ’s example query turns EML JSON extracts north south bounding coordinates: Nice features JQ include ability recursive descent (common XPATH possible purrr) specify shape names return object (e.g. list elements named northLat southLat case.)","code":"hf205 <- system.file(\"extdata/hf205.xml\", package=\"emld\")  as_emld(hf205) %>%    as_json() %>%    jq('.dataset.coverage.geographicCoverage.boundingCoordinates |         { northLat: .northBoundingCoordinate,           southLat: .southBoundingCoordinate }') %>%   fromJSON() ## $northLat ## [1] \"+42.55\" ##  ## $southLat ## [1] \"+42.42\""},{"path":"https://docs.ropensci.org/emld/paper.html","id":"as-semantic-data-sparql-queries","dir":"","previous_headings":"","what":"As semantic data: SPARQL queries","title":"Working with EML as JSON-LD","text":"Another side-effect JSON-LD representation can treat EML semantic data. can provide way integrate EML records data sources, means can query EML using semantic SPARQL queries. One nice thing SPARQL queries , contrast XPATH, JQ, graph queries, SPARQL always returns data.frame – particularly convenient familiar format R users. First, render EML XML document JSON-LD file: can now construct SPARQL query. SPARQL queries look like SQL queries name columns want SELECT command. Unlike SQL, SPARQL allows us walk graph treating names variables, indicated prefixing ? variable name. use block define variables relate . case, ask genus species name bounding box found EML file. can now use rdflib library execute SPARQL query EML document display resulting data.frame:","code":"f <- system.file(\"extdata/hf205.xml\", package=\"emld\") as_emld(f) %>%   as_json(\"hf205.json\") sparql <-   'PREFIX eml: <https://eml.ecoinformatics.org/eml-2.2.0/>    SELECT ?genus ?species ?northLat ?southLat ?eastLong ?westLong     WHERE {      ?y eml:taxonRankName \"genus\" .     ?y eml:taxonRankValue ?genus .     ?y eml:taxonomicClassification ?s .     ?s eml:taxonRankName \"species\" .     ?s eml:taxonRankValue ?species .     ?x eml:northBoundingCoordinate ?northLat .     ?x eml:southBoundingCoordinate ?southLat .     ?x eml:eastBoundingCoordinate ?eastLong .     ?x eml:westBoundingCoordinate ?westLong .   } ' rdf <- rdf_parse(\"hf205.json\", \"jsonld\") df <- rdf_query(rdf, sparql) df ## # A tibble: 1 x 6 ##   genus      species  northLat southLat eastLong westLong ##   <chr>      <chr>       <dbl>    <dbl>    <dbl>    <dbl> ## 1 Sarracenia purpurea     42.6     42.4    -72.1    -72.3"},{"path":[]},{"path":"https://docs.ropensci.org/emld/reference/as_emld.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an EML file or object into an emld object. — as_emld","title":"Coerce an EML file or object into an emld object. — as_emld","text":"Coerce EML file object emld object.","code":""},{"path":"https://docs.ropensci.org/emld/reference/as_emld.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an EML file or object into an emld object. — as_emld","text":"","code":"as_emld(x, from = c(\"guess\", \"xml\", \"json\", \"list\"))"},{"path":"https://docs.ropensci.org/emld/reference/as_emld.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an EML file or object into an emld object. — as_emld","text":"x path EML file explicit type input format. default, attempt guess format, always safer specify input format. essential literal text strings raw vectors type guessed R object class file extension input.","code":""},{"path":"https://docs.ropensci.org/emld/reference/as_emld.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an EML file or object into an emld object. — as_emld","text":"emld object","code":""},{"path":"https://docs.ropensci.org/emld/reference/as_emld.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an EML file or object into an emld object. — as_emld","text":"","code":"hf205 <- system.file(\"extdata/hf205.xml\", package=\"emld\")  as_emld(hf205) #> access: #>   authSystem: knb #>   order: allowFirst #>   scope: document #>   allow: #>   - principal: uid=HFR,o=lter,dc=ecoinformatics,dc=org #>     permission: all #>   - principal: public #>     permission: read #> additionalMetadata: #> - metadata: #>     additionalClassifications: #>       status: ongoing #>       researchTopic: community #>       studyType: #>       - short-term measurement #>       - modeling #> - metadata: #>     additionalLinks: #>       url: #>       - name: Ecophysiology of Carnivorous Plants Worldwide 1980-2011 #>         url: http://harvardforest.fas.harvard.edu:8080/exist/xquery/data.xq?id=hf168 #>       - name: Effects of Prey Availability on Sarracenia Physiology at Harvard Forest #>           2005 #>         url: http://harvardforest.fas.harvard.edu:8080/exist/xquery/data.xq?id=hf109 #>       - name: Food Web of Sarracenia Purpurea in United States and Canada since 1999 #>         url: http://harvardforest.fas.harvard.edu:8080/exist/xquery/data.xq?id=hf193 #>       - name: Thresholds and Regime Shifts at Four LTER Sites (CCE, JRN, PAL, SBC) #>           1951-2009 #>         url: http://harvardforest.fas.harvard.edu:8080/exist/xquery/data.xq?id=hf170 #>       - name: Nitrogen Cycling Dynamics in Sarracenia Purpurea at Harvard Forest 2004-2005 #>         url: http://harvardforest.fas.harvard.edu:8080/exist/xquery/data.xq?id=hf096 #>       - name: Organic and Inorganic Nitrogen Uptake by Sarracenia Purpurea at Harvard #>           Forest and Fort Albany ON 2007 #>         url: http://harvardforest.fas.harvard.edu:8080/exist/xquery/data.xq?id=hf146 #>       - name: Prey Capture by Carnivorous Plants Worldwide 1923-2007 #>         url: http://harvardforest.fas.harvard.edu:8080/exist/xquery/data.xq?id=hf111 #>       - name: Sarracenia Purpurea Prey Capture at Harvard Forest 2008 #>         url: http://harvardforest.fas.harvard.edu:8080/exist/xquery/data.xq?id=hf114 #>       - name: Allochthonous Nutrients in the Sarracenia Microecosystem at Harvard #>           Forest 2005-2007 #>         url: http://harvardforest.fas.harvard.edu:8080/exist/xquery/data.xq?id=hf098 #> dataset: #>   id: HF205 #>   alternateIdentifier: HF205 #>   title: Thresholds and Tipping Points in a Sarracenia Microecosystem at Harvard Forest #>     since 2012 #>   pubDate: '2012' #>   abstract: #>     section: '<para>The primary goal of this project is to determine experimentally #>       the amount of lead time required to prevent a state change. To achieve this #>       goal, we will (1) experimentally induce state changes in a natural aquatic ecosystem #>       - the Sarracenia microecosystem; (2) use proteomic analysis to identify potential #>       indicators of states and state changes; and (3) test whether we can forestall #>       state changes by experimentally intervening in the system. This work uses state-of-the #>       art molecular tools to identify early warning indicators in the field of aerobic #>       to anaerobic state changes driven by nutrient enrichment in an aquatic ecosystem. #>       The study tests two general hypotheses: (1) proteomic biomarkers can function #>       as reliable indicators of impending state changes and may give early warning #>       before increasing variances and statistical flickering of monitored variables; #>       and (2) well-timed intervention based on proteomic biomarkers can avert future #>       state changes in ecological systems.<\/para>' #>   intellectualRights: #>     section: '<para>This dataset is released to the public and may be freely downloaded. #>       Please keep the designated Contact person informed of any plans to use the dataset. #>       Consultation or collaboration with the original investigators is strongly encouraged. #>       Publications and data products that make use of the dataset must include proper #>       acknowledgement. For more information on LTER Network data access and use policies, #>       please see: http://www.lternet.edu/data/netpolicy.html.<\/para>' #>   distribution: #>     online: #>       url: #>         function: information #>         url: http://harvardforest.fas.harvard.edu:8080/exist/xquery/data.xq?id=hf205 #>   coverage: #>     geographicCoverage: #>       geographicDescription: Harvard Forest Greenhouse, Tom Swamp Tract (Harvard Forest) #>       boundingCoordinates: #>         westBoundingCoordinate: '-72.29' #>         eastBoundingCoordinate: '-72.10' #>         northBoundingCoordinate: '+42.55' #>         southBoundingCoordinate: '+42.42' #>         boundingAltitudes: #>           altitudeMinimum: '160' #>           altitudeMaximum: '330' #>           altitudeUnits: meter #>     temporalCoverage: #>       rangeOfDates: #>         beginDate: #>           calendarDate: '2012-06-01' #>         endDate: #>           calendarDate: '2013-12-31' #>     taxonomicCoverage: #>       taxonomicClassification: #>         taxonRankName: genus #>         taxonRankValue: Sarracenia #>         taxonomicClassification: #>           taxonRankName: species #>           taxonRankValue: purpurea #>   contact: #>     individualName: #>       givenName: Aaron #>       surName: Ellison #>     organizationName: Harvard Forest #>     address: #>       deliveryPoint: 324 North Main Street #>       city: Petersham #>       administrativeArea: MA #>       postalCode: '01366' #>       country: USA #>     phone: #>       phonetype: voice #>       phone: (978) 724-3302 #>     electronicMailAddress: aellison@fas.harvard.edu #>   publisher: #>     organizationName: Harvard Forest #>     address: #>       deliveryPoint: 324 North Main Street #>       city: Petersham #>       administrativeArea: MA #>       postalCode: '01366' #>       country: USA #>     onlineUrl: http://harvardforest.fas.harvard.edu #>     phone: #>     - phonetype: voice #>       phone: (978) 724-3302 #>     - phonetype: fax #>       phone: (978) 724-3595 #>   methods: #>     methodStep: #>       description: #>         section: #>         - '<title>General Protocols<\/title><para>1. Field methods. All experiments #>           will be carried out in the greenhouse at Harvard Forest. We have developed #>           an instrumentation system that allows us to collect continuous dissolved #>           [O2] measurements: dedicated micro-probes (DO-166MT; Lazar Research Laboratories: #>           http://www.shelfscientific.com/) connected to multiplexers and data loggers #>           (AM16/32B multiplexer, CR-1000 datalogger and control system [Campbell Scientific: #>           http://www.cambellsci.com]). The initial ecosystem composition in all experimental #>           plants will be standardized by seeding each pitcher with a 10-ml inoculum #>           of liquid collected from pitchers growing at Tom Swamp.  In all experiments, #>           prey will be supplied to pitchers as standardized aliquots of dried and #>           finely ground bald-faced hornets (Dolichovespula maculata; Hymenoptera: #>           Vespidae), which we collect in quantity throughout New England. Both hornets #>           and ants (the latter are the dominant prey of S. purpurea) are hymenoptera, #>           and have nearly identical C:N ratios (hornets: 3.97; common bog-dwelling #>           ants [Tapinoma sessile and Myrmica lobifrons]: 3.37), but on average hornets #>           have greater than 100 times the dry mass of these ants, and are easier to #>           collect and process as a standardized food source. Additions of prey, either #>           as large \"pulses\" or chronic \"presses\" are analogous to the enrichment and #>           eutrophication that occur in aquatic \"green\" food webs in which phytoplankton #>           abundance is boosted through addition of limiting nutrients. In \"brown\" #>           food webs such as the Sarracenia microecosystem, detritus - not primary #>           production - is at the base of the web, and our treatments boost this material #>           as would happen through increases in arthropod prey capture78 or through #>           nitrogen-enriched precipitation.<\/para><para>2. Proteomic analysis. Proteomic #>           profiles of microbial communities are determined after separating the microbial #>           fraction from the pitcher fluid, prey, and other detritus. The microbial #>           \"pellet\" is subjected to SDS-PAGE (sodium dodecyl sulfate polyacrylamide #>           gel) electrophoresis; bands are cut out and digested in-gel with trypsin. #>           Tryptic peptides are subjected to LC-MS/MS (liquid chromatography tandem #>           mass spectrometry) for peptide and protein identification. Absolute abundance #>           of peptides and proteins are quantified using AQUA (Absolute QUAntification) #>           analysis109.<\/para>' #>         - '<title>Specific Experiments<\/title><para>Experiment #1. Effects of nutrient #>           enrichment on state changes and [O2] profiles. This experiment alters nutrient #>           enrichment rates to characterize the [O2] profile and the transition to #>           the anaerobic state. The experimental design is a one-way layout with 5 #>           treatment groups: one control (no enrichment) and 4 enrichment levels (0.125, #>           0.25, 0.5, 1.0 mg prey added ml-1 d-1). One plant is assigned to each treatment #>           group, and the entire set is replicated 6 times over successive weeks. [O2] #>           is monitored continuously for 4 days to characterize state changes and tipping #>           points under different enrichment rates. This experiment tracks a continuous #>           [O2] profile but does not include proteomic analysis. The purpose of Experiment #>           #1 is to identify an enrichment rate E that generates a long pre-tipping #>           period before transition time T to the anaerobic state. This enrichment #>           rate will be used in Experiments #2 - #4.<\/para><para>Experiment #2. Identification #>           of early intervention time and characterization of aerobic and anaerobic #>           proteomes. This experiment will use the single enrichment rate E determined #>           from Experiment #1 and impose different intervention times I at which nutrient #>           enrichment will be terminated. Thus, this experiment will identify the latest #>           time I* at which it is possible to intervene and stop the transition to #>           the anaerobic state by halting enrichment. The [O2] profile will again be #>           monitored continuously over 10 days to measure the state of the system. #>           From Experiment #1, the transition time T to the anaerobic state with no #>           intervention will be known. We will use one control group (no prey addition) #>           and ten levels of intervention time (all with the same enrichment rate E) #>           as a proportion of T (0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0). #>           Six plants will be assigned randomly to each of the 11 treatments in a randomized #>           one-way layout and [O2] profiles will be monitored continuously. In addition #>           to the [O2] profiles, we will also characterize the protein profiles of #>           aerobic and anaerobic pitchers in all 11 treatment groups at the end of #>           the experiment.<\/para><para>After the plants are harvested, we will create #>           proteomic profiles of the predominantly bacterial portion (centrifuged pellet) #>           of the pitcher fluid from each plant, as described in General Protocols. #>           Thus, 66 separate pellet-fraction samples will be analyzed by SDS-PAGE. #>           After examining the SDS-PAGE profiles, approximately ten proteins that show #>           dynamic patterns consistent with state change and five that do not change #>           will be cut from the gel, subjected to in-gel tryptic digestion and a portion #>           of the tryptic peptides will be analyzed by LC-MS/MS. Using these data, #>           we will choose three identified peptides from each protein for peptide synthesis #>           such that each synthesized peptide contains stable isotope labels (AQUA #>           peptides) to distinguish them by mass from the native peptides. We will #>           then quantify all 45 of the native peptides from the original samples using #>           a known amount of each AQUA peptide spiked into the tryptic digest. The #>           AQUA analysis of proteins that do not show changes will be used for normalization #>           between samples. These data will be used to independently identify the current #>           state of the system and forecast the time-to-transition.<\/para><para>We #>           will use Sequest searches for initial identification of peptides; relevant #>           scores including Xcorr and Delta Cn values will be given for each peptide. #>           Other peptides will be identified by de novo sequencing using PepNovo; all #>           PepNovo scores will likewise be given including any N- or C-terminal gaps. #>           Mass error in ppm will be reported for each precursor ion. We will use standard #>           multivariate analysis to search for distinctive proteomic profiles114 that #>           characterize aerobic and anaerobic ecosystems, as well as ecosystems that #>           developed with and without inputs of photosynthetic O2 and plant metabolites.<\/para><para>Experiment #>           #3. Identification of diagnostic proteins. Using Experiments #1 and 2, we #>           will have identified an enrichment rate E with a long pre-tipping period #>           and an intervention time I* before which mitigation and termination of enrichment #>           will prevent eutrophication. Experiment #3 will characterize the mean and #>           variance of the protein profile before and after I*. We are especially interested #>           in identifying proteins that increase rapidly in abundance (or variance) #>           well before the onset of flickering in [O2] and before the transition time #>           T from the aerobic to the anaerobic state.<\/para><para>A cohort of 100 plants #>           all will be fed at rate E (determined from Experiment #1), with intervention #>           time I* determined from Experiment #2, although no intervention will be #>           used in this \"press\" experiment so that we can contrast proteins before #>           and after the state change. At seven times before I* and three times after #>           I*, we will harvest 10 randomly chosen plants. At each prescribed harvest #>           time, we will measure [O2] and collect samples from each plant for proteomic #>           screening using both SDS-PAGE and AQUA analysis. This experiment will identify #>           proteins that rise quickly in abundance during the pre- I* period and can #>           be used as early indicators of a future tipping point. Because different #>           plants will be harvested at each time period, this is a one-way ANOVA design, #>           with pre-and post- I* a priori contrasts. A randomization test will be used #>           to determine whether variances in protein expression differ through time. #>           During these analyses we will use the data from the AQUA peptides and from #>           known amounts of protein standards, such as bovine serum albumin, to approximate #>           the amount of protein in a given coomassie-stained SDS-PAGE gel band. The #>           reason for doing this is to provide a fast \"real-time\" assay based just #>           on expression in the SDS-PAGE. This rapid assay will be used in Experiment #>           #4.<\/para><para>Experiment # 4. Proof-of-application. This experiment will #>           provide a benchmark test of our methods and their ability to correctly identify #>           tipping points. A cohort of 100 plants will each be fitted with [O2] probes #>           and started on the enrichment regime. Two times per day, we will collect #>           3 plants each, pool their contents, and conduct a rapid screen in the lab #>           with SDS-PAGE for the diagnostic proteins that were identified in Experiment #>           #3. We will use the protein expression in the gel to delineate an \"early\" #>           and a \"late\" mitigation strategy. As soon as diagnostic proteins measured #>           in the SDS-gels are at abundances that signal we are at 0.5×I* - approximately #>           one-half of the way to the latest intervention time - we will randomly select #>           one third of the remaining plants for mitigation and termination of enrichment #>           (the \"early\" mitigation strategy). We will continue to harvest plants from #>           the remainder of the cohort and monitor proteins. As soon as diagnostic #>           proteins signal we are at 0.75 times I*, we will randomly select one half #>           of the remaining plants for mitigation and termination of enrichment (the #>           \"late\" mitigation strategy). The remaining plants (approximately one sixth #>           to one third of the original cohort) will continue to be enriched. We will #>           monitor [O2] in all 3 groups (no-mitigation control, early mitigation, late #>           mitigation) until all plants reach a new [O2] equilibrium. If the protein #>           markers are successful, the proportion of food webs that remain aerobic #>           will be significantly higher in the two mitigation treatments than in the #>           no-mitigation control.<\/para>' #>   dataTable: #>     id: hf205-01 #>     entityName: hf205-01-TPexp1.csv #>     entityDescription: tipping point experiment 1 #>     physical: #>       id: '1354212701790' #>       objectName: hf205-01-TPexp1.csv #>       dataFormat: #>         textFormat: #>           numHeaderLines: '1' #>           recordDelimiter: \\r\\n #>           attributeOrientation: column #>           simpleDelimited: #>             fieldDelimiter: ',' #>       distribution: #>         online: #>           url: #>             function: download #>             url: http://harvardforest.fas.harvard.edu/data/p20/hf205/hf205-01-TPexp1.csv #>     attributeList: #>       attribute: #>       - id: '1354213311470' #>         attributeName: run.num #>         attributeDefinition: 'which run number (=block). Range: 1 – 6. (integer)' #>         measurementScale: #>           nominal: #>             nonNumericDomain: #>               textDomain: #>                 definition: which run number #>       - id: '1354213311471' #>         attributeName: year #>         attributeDefinition: year, 2012 #>         measurementScale: #>           dateTime: #>             formatString: YYYY #>       - id: '1354213311472' #>         attributeName: day #>         attributeDefinition: 'Julian day. Range: 170 – 209.' #>         measurementScale: #>           dateTime: #>             formatString: DDD #>       - id: '1354213311473' #>         attributeName: hour.min #>         attributeDefinition: hour and minute of observation. Range 1 – 2400 (integer) #>         measurementScale: #>           dateTime: #>             formatString: hhmm #>       - id: '1354213311474' #>         attributeName: i.flag #>         attributeDefinition: is variable Real, Interpolated or Bad (character/factor) #>         measurementScale: #>           nominal: #>             nonNumericDomain: #>               enumeratedDomain: #>                 codeDefinition: #>                 - code: R #>                   definition: real #>                 - code: I #>                   definition: interpolated #>                 - code: B #>                   definition: bad #>       - id: '1354213311475' #>         attributeName: variable #>         attributeDefinition: what variable being measured in what treatment (character/factor). #>         measurementScale: #>           nominal: #>             nonNumericDomain: #>               enumeratedDomain: #>                 codeDefinition: #>                 - code: control #>                   definition: no prey added #>                 - code: low #>                   definition: 0.125 mg prey added ml-1 d-1 #>                 - code: med.low #>                   definition: 0,25 mg prey added ml-1 d-1 #>                 - code: med.high #>                   definition: 0.5 mg prey added ml-1 d-1 #>                 - code: high #>                   definition: 1.0 mg prey added ml-1 d-1 #>                 - code: air.temp #>                   definition: air temperature measured just above all plants (1 thermocouple) #>                 - code: water.temp #>                   definition: water temperature measured within each pitcher #>                 - code: par #>                   definition: photosynthetic active radiation (PAR) measured just #>                     above all plants (1 sensor) #>       - id: '1354213311476' #>         attributeName: value.i #>         attributeDefinition: value of measured variable for run.num on year/day/hour.min. #>         measurementScale: #>           nominal: #>             nonNumericDomain: #>               enumeratedDomain: #>                 codeDefinition: #>                 - code: control #>                   definition: '% dissolved oxygen' #>                 - code: low #>                   definition: '% dissolved oxygen' #>                 - code: med.low #>                   definition: '% dissolved oxygen' #>                 - code: med.high #>                   definition: '% dissolved oxygen' #>                 - code: high #>                   definition: '% dissolved oxygen' #>                 - code: air.temp #>                   definition: degrees C #>                 - code: water.temp #>                   definition: degrees C #>                 - code: par #>                   definition: micromoles m-1 s-1 #>     numberOfRecords: '9999' #>   creator: #>   - individualName: #>       givenName: Aaron #>       surName: Ellison #>   - individualName: #>       givenName: Nicholas #>       surName: Gotelli #>   associatedParty: #>   - individualName: #>       givenName: Benjamin #>       surName: Baiser #>     role: Researcher #>   - individualName: #>       givenName: Jennifer #>       surName: Sirota #>     role: Researcher #>   keywordSet: #>   - keywordThesaurus: LTER controlled vocabulary #>     keyword: #>     - bacteria #>     - carnivorous plants #>     - genetics #>     - thresholds #>   - keywordThesaurus: LTER core area #>     keyword: #>     - populations #>     - inorganic nutrients #>     - disturbance #>   - keywordThesaurus: HFR default #>     keyword: #>     - Harvard Forest #>     - HFR #>     - LTER #>     - USA #>   otherEntity: #>   - id: hf205-02 #>     entityName: hf205-02-mathematica-oxygen.nb #>     entityDescription: Mathematica code for oxygen model (nb) #>     physical: #>       objectName: hf205-02-mathematica-oxygen.nb #>       dataFormat: #>         externallyDefinedFormat: #>           formatName: Mathematica notebook #>       distribution: #>         online: #>           url: #>             function: download #>             url: http://harvardforest.fas.harvard.edu/data/p20/hf205/hf205-02-mathematica-oxygen.nb #>     entityType: Mathematica code #>   - id: hf205-03 #>     entityName: hf205-03-mathematica-oxygen.pdf #>     entityDescription: Mathematica code for oxygen model (pdf) #>     physical: #>       objectName: hf205-03-mathematica-oxygen.pdf #>       dataFormat: #>         externallyDefinedFormat: #>           formatName: pdf #>       distribution: #>         online: #>           url: #>             function: download #>             url: http://harvardforest.fas.harvard.edu/data/p20/hf205/hf205-03-mathematica-oxygen.pdf #>     entityType: Mathematica code #> packageId: knb-lter-hfr.205.4 #> schemaLocation: eml://ecoinformatics.org/eml-2.1.0 http://nis.lternet.edu/schemas/EML/eml-2.1.0/eml.xsd #> scope: system #> system: hfr"},{"path":"https://docs.ropensci.org/emld/reference/as_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an emld object into JSON — as_json","title":"Coerce an emld object into JSON — as_json","text":"Coerce emld object JSON","code":""},{"path":"https://docs.ropensci.org/emld/reference/as_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an emld object into JSON — as_json","text":"","code":"as_json(x, file = NULL)"},{"path":"https://docs.ropensci.org/emld/reference/as_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an emld object into JSON — as_json","text":"x emld object file optional path write file. Otherwise, defaults NULL return json object.","code":""},{"path":"https://docs.ropensci.org/emld/reference/as_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an emld object into JSON — as_json","text":"json object. file path provided, metadata written JSON file function returns NULL invisibly.","code":""},{"path":"https://docs.ropensci.org/emld/reference/as_json.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce an emld object into JSON — as_json","text":"Note: since emld list object maintains 1:1 correspondence JSON, following conventions jsonlite, function basically trivial. purpose default auto_unbox = TRUE serializing lists JSON.","code":""},{"path":"https://docs.ropensci.org/emld/reference/as_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an emld object into JSON — as_json","text":"","code":"f <- system.file(\"extdata/example.xml\", package = \"emld\") emld <- as_emld(f) json <- as_json(emld) ## can also write a json file to disk: json_file <- tempfile() as_json(emld, json_file)"},{"path":"https://docs.ropensci.org/emld/reference/as_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an emld object into XML (EML's standard format) — as_xml","title":"Coerce an emld object into XML (EML's standard format) — as_xml","text":"Coerce emld object XML (EML's standard format)","code":""},{"path":"https://docs.ropensci.org/emld/reference/as_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an emld object into XML (EML's standard format) — as_xml","text":"","code":"as_xml(x, file = NULL, root = \"eml\", ns = \"eml\", schemaLocation = TRUE)"},{"path":"https://docs.ropensci.org/emld/reference/as_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an emld object into XML (EML's standard format) — as_xml","text":"x emld object file optional path write file. Otherwise, defaults NULL return xml_document object. root name root node; default 'eml' ns namespace abbreviation root node, default 'eml' schemaLocation explicitly set x, automatically set xsi:schemaLocation based upon root namespace (TRUE, default), set xsi:schemaLocation (FALSE), set specific xsi:schemaLocation value (\"value ...\"). See Examples.","code":""},{"path":"https://docs.ropensci.org/emld/reference/as_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an emld object into XML (EML's standard format) — as_xml","text":"xml_document object. file path provided, metadata written XML file function returns NULL invisibly.","code":""},{"path":"https://docs.ropensci.org/emld/reference/as_xml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce an emld object into XML (EML's standard format) — as_xml","text":"Unlike as_json, function rely existing convention serializing list xml, eg, defined xml2::as_xml_document() Instead, relies modified version, as_eml_document.  addition steps must taken working JSON-LD deal different possible framings namespaces JSON-LD context element. Thus as_xml function particular EML emld objects alone.","code":""},{"path":"https://docs.ropensci.org/emld/reference/as_xml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an emld object into XML (EML's standard format) — as_xml","text":"","code":"f <- system.file(\"extdata/example.xml\", package = \"emld\") emld <- as_emld(f) xml <- as_xml(emld)  ## can also write directly to a file: xml_file <- tempfile() as_xml(emld, xml_file)  ## if you don't want the `xsi:schemaLocation` attribute set as_xml(emld, schemaLocation = FALSE) #> A value for 'schemaLocation' was set in the document but the 'schemaLocation' argument was set to 'FALSE' so the value from the document was retained. To serialize a document without a schemaLocation, remove the 'schemaLocation' element from the document before serializing. #> {xml_document} #> <eml packageId=\"eml.1.1\" xsi:schemaLocation=\"https://eml.ecoinformatics.org/eml-2.2.0/ eml.xsd\" system=\"knb\" xmlns:eml=\"https://eml.ecoinformatics.org/eml-2.2.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:stmml=\"http://www.xml-cml.org/schema/stmml-1.2\"> #> [1] <dataset>\\n  <title>Data from Cedar Creek LTER on productivity and specie ...  ## or if you want to set your own value as_xml(emld, schemaLocation = \"https://eml.ecoinformatics.org/eml-2.2.0 http://example.com/eml-2.2.0/eml.xsd\") #> {xml_document} #> <eml packageId=\"eml.1.1\" xsi:schemaLocation=\"https://eml.ecoinformatics.org/eml-2.2.0/ eml.xsd\" system=\"knb\" xmlns:eml=\"https://eml.ecoinformatics.org/eml-2.2.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:stmml=\"http://www.xml-cml.org/schema/stmml-1.2\"> #> [1] <dataset>\\n  <title>Data from Cedar Creek LTER on productivity and specie ..."},{"path":"https://docs.ropensci.org/emld/reference/eml_ns.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the XML namespace for a version of EML — eml_ns","title":"Get the XML namespace for a version of EML — eml_ns","text":"Utility function use filling xmlns, schemaLocation, vocab various representations EML. little future-proof keeping dictionary version since break next release.","code":""},{"path":"https://docs.ropensci.org/emld/reference/eml_ns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the XML namespace for a version of EML — eml_ns","text":"","code":"eml_ns(version = eml_version())"},{"path":"https://docs.ropensci.org/emld/reference/eml_ns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the XML namespace for a version of EML — eml_ns","text":"version EML version, currently either eml-2.2.0 (current version) eml-2.1.1. Defaults current version.","code":""},{"path":"https://docs.ropensci.org/emld/reference/eml_ns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the XML namespace for a version of EML — eml_ns","text":"returns full XML namespace URI specified version schema","code":""},{"path":"https://docs.ropensci.org/emld/reference/eml_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"eml_validate — eml_validate","title":"eml_validate — eml_validate","text":"eml_validate processes EML document using XSD schema appropriate version EML determines document schema-valid defined XSD specification","code":""},{"path":"https://docs.ropensci.org/emld/reference/eml_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"eml_validate — eml_validate","text":"","code":"eml_validate(eml, encoding = \"UTF-8\", schema = NULL)"},{"path":"https://docs.ropensci.org/emld/reference/eml_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"eml_validate — eml_validate","text":"eml file path, xml_document, encoding optional encoding files, default UTF-8. schema path schema","code":""},{"path":"https://docs.ropensci.org/emld/reference/eml_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"eml_validate — eml_validate","text":"Whether document valid (logical)","code":""},{"path":"https://docs.ropensci.org/emld/reference/eml_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"eml_validate — eml_validate","text":"","code":"# \\donttest{   f <- system.file(\"extdata\", \"example.xml\", package = \"emld\")   ## validate file directly from disk:  eml_validate(f) #> [1] TRUE #> attr(,\"errors\") #> character(0)   ## validate an eml object:  eml <- as_emld(f)  eml_validate(eml) #> [1] TRUE #> attr(,\"errors\") #> character(0)  # }"},{"path":"https://docs.ropensci.org/emld/reference/eml_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Set or check the EML version default — eml_version","title":"Set or check the EML version default — eml_version","text":"Set check EML version default","code":""},{"path":"https://docs.ropensci.org/emld/reference/eml_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set or check the EML version default — eml_version","text":"","code":"eml_version(version = getOption(\"emld_db\", \"eml-2.2.0\"))"},{"path":"https://docs.ropensci.org/emld/reference/eml_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set or check the EML version default — eml_version","text":"version EML version, currently either eml-2.2.0 (current version), eml-2.1.1. 'eml-' prefix can omitted.","code":""},{"path":"https://docs.ropensci.org/emld/reference/eml_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set or check the EML version default — eml_version","text":"returns EML version string. side-effect, sets requested version default version setting emld_db variable options().","code":""},{"path":"https://docs.ropensci.org/emld/reference/eml_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set or check the EML version default — eml_version","text":"","code":"eml_version() #> [1] \"eml-2.2.0\" eml_version(\"2.1.1\") #> [1] \"eml-2.1.1\" eml_version(\"eml-2.1.1\") #> [1] \"eml-2.1.1\""},{"path":"https://docs.ropensci.org/emld/reference/emld-package.html","id":null,"dir":"Reference","previous_headings":"","what":"emld: Ecological Metadata as Linked Data — emld-package","title":"emld: Ecological Metadata as Linked Data — emld-package","text":"goal emld provide way work EML metadata JSON-LD format. heart, package simply way translate EML XML document JSON-LD able reverse semantically equivalent JSON-LD file can serialized EML-schema valid XML.","code":""},{"path":"https://docs.ropensci.org/emld/reference/emld-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"emld: Ecological Metadata as Linked Data — emld-package","text":"package three core functions: as_emld() Convert EML's xml files (json version created package) native R object (S3 class called emld, essentially just list). as_xml() Convert native R format, emld, back XML-schema valid EML. as_json() Convert native R format, emld, json(LD).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/emld/reference/emld-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"emld: Ecological Metadata as Linked Data — emld-package","text":"Maintainer: Carl Boettiger cboettig@gmail.com (ORCID) [copyright holder] Authors: Matthew B. Jones jones@nceas.ucsb.edu (ORCID) [copyright holder] Bryce Mecum mecum@nceas.ucsb.edu (ORCID) [copyright holder]","code":""},{"path":"https://docs.ropensci.org/emld/reference/find_real_root_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the real QName for the root element, including its prefix — find_real_root_name","title":"Get the real QName for the root element, including its prefix — find_real_root_name","text":"Note default namespace used, prefix d1.","code":""},{"path":"https://docs.ropensci.org/emld/reference/find_real_root_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the real QName for the root element, including its prefix — find_real_root_name","text":"","code":"find_real_root_name(doc)"},{"path":"https://docs.ropensci.org/emld/reference/find_real_root_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the real QName for the root element, including its prefix — find_real_root_name","text":"doc xml_document","code":""},{"path":"https://docs.ropensci.org/emld/reference/find_real_root_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the real QName for the root element, including its prefix — find_real_root_name","text":"list elements prefix name. prefix NULL element namespace prefix name always character.","code":""},{"path":"https://docs.ropensci.org/emld/reference/guess_root_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the root schema module and version — guess_root_schema","title":"Find the root schema module and version — guess_root_schema","text":"Find root schema module version","code":""},{"path":"https://docs.ropensci.org/emld/reference/guess_root_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the root schema module and version — guess_root_schema","text":"","code":"guess_root_schema(doc)"},{"path":"https://docs.ropensci.org/emld/reference/guess_root_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the root schema module and version — guess_root_schema","text":"doc xml_document","code":""},{"path":"https://docs.ropensci.org/emld/reference/guess_root_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the root schema module and version — guess_root_schema","text":"found, list names 'version', 'module', `namespace. found, throws error.","code":""},{"path":"https://docs.ropensci.org/emld/reference/guess_schema_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess an appropriate schemaLocation value for a given version of the schema — guess_schema_location","title":"Guess an appropriate schemaLocation value for a given version of the schema — guess_schema_location","text":"simple helper make filling schemaLocation attribute documents package creates. Supports EML 2.1.1 newer.","code":""},{"path":"https://docs.ropensci.org/emld/reference/guess_schema_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess an appropriate schemaLocation value for a given version of the schema — guess_schema_location","text":"","code":"guess_schema_location(version = eml_version())"},{"path":"https://docs.ropensci.org/emld/reference/guess_schema_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess an appropriate schemaLocation value for a given version of the schema — guess_schema_location","text":"version Optional. Override version schema. Defaults current version returned eml_version. See eml_version information change current version.","code":""},{"path":"https://docs.ropensci.org/emld/reference/guess_schema_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess an appropriate schemaLocation value for a given version of the schema — guess_schema_location","text":"Returns string suitable value schemaLocation NULL value found.","code":""},{"path":"https://docs.ropensci.org/emld/reference/guess_schema_location.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guess an appropriate schemaLocation value for a given version of the schema — guess_schema_location","text":"","code":"if (FALSE) { # Get an appropriate schemaLocation value for the current version fo EML guess_schema_location()  # Get an appropriate value for EML 2.1.1 guess_schema_location(\"eml-2.1.1\") }"},{"path":"https://docs.ropensci.org/emld/reference/template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a template for an EML object — template","title":"Create a template for an EML object — template","text":"Create template EML object","code":""},{"path":"https://docs.ropensci.org/emld/reference/template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a template for an EML object — template","text":"","code":"template(object)"},{"path":"https://docs.ropensci.org/emld/reference/template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a template for an EML object — template","text":"object name eml object create","code":""},{"path":"https://docs.ropensci.org/emld/reference/template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a template for an EML object — template","text":"list elements named according properties object. can coerced EML, see vignettes. NULL-valued elements (~) can take data entry directly, empty list()-valued elements () indicate properties take eml objects values.","code":""},{"path":"https://docs.ropensci.org/emld/reference/template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a template for an EML object — template","text":"Note: function can called recursions, may bad idea.","code":""},{"path":"https://docs.ropensci.org/emld/reference/template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a template for an EML object — template","text":"","code":"template(\"creator\") #> individualName: {} #> organizationName: ~ #> positionName: ~ #> address: {} #> phone: ~ #> electronicMailAddress: ~ #> onlineUrl: ~ #> userId: ~ #> id: ~ #> system: ~ #> scope: ~"},{"path":"https://docs.ropensci.org/emld/news/index.html","id":"emld-051","dir":"Changelog","previous_headings":"","what":"emld 0.5.1","title":"emld 0.5.1","text":"CRAN release: 2020-09-27 don’t build vignette machines don’t packages listed Suggests (packages must used conditionally)","code":""},{"path":"https://docs.ropensci.org/emld/news/index.html","id":"emld-050","dir":"Changelog","previous_headings":"","what":"emld 0.5.0","title":"emld 0.5.0","text":"CRAN release: 2020-07-08 User-facing changes: Rewrote logic around emld works schemaLocation: schemaLocation argument as_xml used fill default value pointed local copy eml.xsd. Now, automatically fills web-resolvable location make validating documents easier box. See #44 & #45. Re-worked logic handling schemaLocation serializing XML: schemaLocation present emld object, used verbatim (change API ) regardless schemaLocation argument as_xml. as_xml(..., schemaLocation = TRUE) causes value guessed. as_xml(..., schemaLocation = FALSE) explicitly prevents value filled serialized. as_xml(..., schemaLocation = \"value) explicitly sets provided value. See #44 & #45. emld::eml_validate longer depends schemaLocation determine correct XSD use schema validation now uses two helpers (See ) find correct schema file. See #52 & #45. emld::eml_version now allows specifying version without eml- prefix, like `eml_version(“2.1.1”), throw warning gets output doesn’t ’look right rather silently failing. Fixed bug EML 2.1.1 units dictionary used EML 2.2.0 docs cause spurious validation errors. See #56. Developer-facing (non-exported) changes: find_real_root_name(doc : xml_document) : list(prefix : character, name: character) returns namespace prefix local name root element xml_document. guess_root_schema(doc : xml_document) : list(module : character, version : character, namespace : character) returns module, schema version, namespace URI root element xml_document. schemaLocation now ignored roundtrip testing new () behavior emld respect schemaLocation. Roundtrip testing can now handle documents supposed invalid still roundtripped. Specify intentionally invalid files adding “invalid” (case insensitive) filename inst/tests. changes: Minor tweaks README. Thanks @jeanetteclark","code":""},{"path":"https://docs.ropensci.org/emld/news/index.html","id":"emld-040","dir":"Changelog","previous_headings":"","what":"emld 0.4.0","title":"emld 0.4.0","text":"CRAN release: 2020-02-05 Fixed serialization bug references attributes #48 Fixed validation bug: packageId now used identifier checking uniqueness, errors annotation elements additionalMetadata. #49 Fixed validation bug: XPath referencing element rather attribute references. #47","code":""},{"path":"https://docs.ropensci.org/emld/news/index.html","id":"emld-030","dir":"Changelog","previous_headings":"","what":"emld 0.3.0","title":"emld 0.3.0","text":"CRAN release: 2019-10-11 Updated package support version 2.2.0 EML. #40. See EML website information 2.2.0 release. Fixed minor XML serialization issue TextType nodes extra whitespace added. #37. Relaxed eml_validate’s behavior validating custom units. #35.","code":""},{"path":"https://docs.ropensci.org/emld/news/index.html","id":"emld-020","dir":"Changelog","previous_headings":"","what":"emld 0.2.0","title":"emld 0.2.0","text":"CRAN release: 2019-03-06 Implemented changes requested rOpenSci review, detailed #30","code":""},{"path":"https://docs.ropensci.org/emld/news/index.html","id":"emld-011","dir":"Changelog","previous_headings":"","what":"emld 0.1.1","title":"emld 0.1.1","text":"Version submitted rOpenSci review Added NEWS.md file track changes package.","code":""}]
